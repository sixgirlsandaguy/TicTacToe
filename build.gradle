/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'laufey14' at '10/23/15 2:10 PM' with Gradle 2.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'pmd'
apply plugin: 'jacoco'

mainClassName = "ru.sixgirlsandaguy.ticTacToe.ticTacToeWeb"

jar {
	manifest { attributes("Main-Class": "ru.sixgirlsandaguy.ticTacToe.ticTacToeWeb") }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    selenium
    seleniumXvfb
}

 
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.immutables:gson:2.1.0'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile 'com.sparkjava:spark-core:2.3'

    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.48.2'
}


task seleniumXvfb(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'bin/xvfb start'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
    }

    doLast {
        'sh -e /etc/init.d/xvfb stop'.execute()
    }
}




pmd {
	ignoreFailures = true;
	toolVersion = '5.1.3'
 	ruleSets = [
            'java-basic',
            'java-braces',
            'java-codesize',
            'java-design',
            'java-empty',
            'java-imports',
            'java-junit',
            'java-migrating',
            'java-naming',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
            ]
}
jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

test.finalizedBy jacocoTestReport

run {
	standardInput = System.in
}

task stage {
	dependsOn installApp
}
